name: Build Desktop + Android

permissions:
  contents: write

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      publish_release:
        description: "Create/Update GitHub Release with built artifacts"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]
      target:
        description: "Build target set (workflow_dispatch only)"
        required: false
        default: android
        type: choice
        options: [all, android, ubuntu, macos-arm, windows]

env:
  # Force CI so tools behave non-interactively
  CI: true
  # Increment this manually to bust the cargo target cache if it becomes stale
  CARGO_TARGET_CACHE_BUSTER: 1

jobs:
  build-desktop-ubuntu:
    name: Desktop (Ubuntu)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install Linux dependencies (gtk/webkit)
        run: |
          set -euxo pipefail
          sudo apt-get update
          # Detect appropriate WebKitGTK dev package (Ubuntu 24.04 uses 4.1)
          if apt-cache show libwebkit2gtk-4.1-dev >/dev/null 2>&1; then
            WEBKIT_PKG=libwebkit2gtk-4.1-dev
          else
            WEBKIT_PKG=libwebkit2gtk-4.0-dev
          fi
          # Prefer Ayatana; fall back to old appindicator if needed
          if apt-cache show libayatana-appindicator3-dev >/dev/null 2>&1; then
            APPIND_PKG=libayatana-appindicator3-dev
          else
            APPIND_PKG=libappindicator3-dev
          fi
          sudo apt-get install -y \
            libgtk-3-dev \
            "$WEBKIT_PKG" \
            "$APPIND_PKG" \
            librsvg2-dev \
            patchelf \
            pkg-config

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend (to match tauri.conf.json)
        run: pnpm build

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry + git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo target (release artifacts)
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/target
          key: ${{ runner.os }}-cargo-target-desktop-${{ env.CARGO_TARGET_CACHE_BUSTER }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-desktop-

      - name: Build Tauri app
        run: pnpm tauri build

      - name: Upload desktop artifacts (Ubuntu)
        uses: actions/upload-artifact@v4
        with:
          name: swiftpan-ubuntu-bundles
          compression-level: 0
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/appimage/*.appimage
            src-tauri/target/release/bundle/rpm/*.rpm
          if-no-files-found: error

  build-desktop-macos-arm:
    name: Desktop (macOS arm)
    runs-on: macos-14
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend (to match tauri.conf.json)
        run: pnpm build

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry + git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo target (release artifacts)
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/target
          key: ${{ runner.os }}-cargo-target-desktop-${{ env.CARGO_TARGET_CACHE_BUSTER }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-desktop-

      - name: Build Tauri app
        run: pnpm tauri build

      - name: Upload desktop artifacts (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: swiftpan-macos-bundles
          compression-level: 0
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg
          if-no-files-found: error

  build-desktop-windows:
    name: Desktop (Windows)
    runs-on: windows-latest
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend (to match tauri.conf.json)
        run: pnpm build

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry + git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo target (release artifacts)
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/target
          key: ${{ runner.os }}-cargo-target-${{ env.CARGO_TARGET_CACHE_BUSTER }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Build Tauri app
        run: pnpm tauri build

      - name: Upload desktop artifacts (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: swiftpan-windows-bundles
          compression-level: 0
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/msi/*.MSI
          if-no-files-found: error

  build-android:
    name: Android (Ubuntu)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v') }}
    environment: ANDROID_KEYSTORE_B64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend (to match tauri.conf.json)
        run: pnpm build

      - name: Setup Java (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        shell: bash
        run: |
          sdkmanager --install \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0"

      - name: Setup Android NDK (r26d)
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d # 26.1.10909125
          add-to-path: true
          local-cache: true
          link-to-sdk: true

      - name: Export NDK env
        run: |
          echo "NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV

      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          # Only build arm64 (arm64-v8a) to avoid producing universal / extra ABIs
          targets: aarch64-linux-android

      - name: Cache Cargo registry + git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo target (release artifacts)
        uses: actions/cache@v4
        with:
          path: |
            src-tauri/target
          # Separate key namespace from desktop to avoid contention.
          key: ${{ runner.os }}-cargo-target-android-${{ env.CARGO_TARGET_CACHE_BUSTER }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-android-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Prepare Android keystore (if secrets present)
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${ANDROID_KEYSTORE_B64:-}" ] && [ -n "${ANDROID_KEYSTORE_PASSWORD:-}" ]; then
            mkdir -p src-tauri/gen/android
            echo "Decoding keystore into working directory" >&2
            echo "$ANDROID_KEYSTORE_B64" | base64 -d > src-tauri/gen/android/swiftpan-release.jks
            KEY_ALIAS_VALUE="${ANDROID_KEY_ALIAS:-swiftpan_release}"
            {
              printf 'password=%s\n' "$ANDROID_KEYSTORE_PASSWORD"
              printf 'keyAlias=%s\n' "$KEY_ALIAS_VALUE"
              printf 'storeFile=%s/src-tauri/gen/android/swiftpan-release.jks\n' "$GITHUB_WORKSPACE"
            } > src-tauri/gen/android/keystore.properties
            chmod 600 src-tauri/gen/android/swiftpan-release.jks
            echo "Keystore prepared." >&2
          else
            echo "Android release signing secrets absent; will build unsigned release." >&2
          fi
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_B64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}

      - name: Build Android (APK and AAB)
        env:
          NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          # Build release artifacts. Produces APK and AAB under gen/android outputs
          pnpm tauri android build --target aarch64

      - name: Collect Android artifacts
        run: |
          echo "Android outputs:"
          find src-tauri/gen/android/app/build/outputs -type f -maxdepth 3 -print || true

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: swiftpan-android-outputs
          compression-level: 0
          path: |
            # Primary expected (only --target aarch64 build): universal release outputs
            src-tauri/gen/android/app/build/outputs/apk/universal/release/*.apk
            src-tauri/gen/android/app/build/outputs/bundle/universalRelease/*.aab
            # Fallback patterns in case future split logic reintroduced
            src-tauri/gen/android/app/build/outputs/apk/arm64-v8a/release/*.apk
            src-tauri/gen/android/app/build/outputs/bundle/arm64V8aRelease/*.aab
          if-no-files-found: error

  publish:
    name: Publish GitHub Release
    needs:
      [
        build-android,
        build-desktop-ubuntu,
        build-desktop-macos-arm,
        build-desktop-windows,
      ]
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: swiftpan-*
          merge-multiple: true

      - name: List gathered files
        run: |
          echo "Files to publish:"
          ls -R

      - name: Collect release files
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          # Patterns we care about
          patterns=(
            "**/*.apk"
            "**/*.aab"
            "**/*.dmg"
            "**/*.[mM][sS][iI]"
            "**/*.[dD][eE][bB]"
            "**/*.AppImage" "**/*.appimage"
            "**/*.[rR][pP][mM]"
          )
          files=()
          for pat in "${patterns[@]}"; do
            for f in $pat; do
              [[ -f "$f" ]] && files+=("$f")
            done
          done
          echo "Found ${#files[@]} release files"
          # Emit multi-line output
          {
            echo "files<<EOF"
            printf '%s\n' "${files[@]}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.collect.outputs.files }}
          fail_on_unmatched_files: false
          overwrite_files: true
          draft: false
          # Mark pre-release when the tag name contains -beta or -rc
          prerelease: ${{ contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
